function imageToMatrix(id) {
    var image = document.getElementById(id);
    var w = image.width, h = image.height;
    var canvas = document.createElement('canvas');
    canvas.width = w;
    canvas.height = h;
    var context = canvas.getContext('2d');
    context.drawImage(image, 0,0);
    var matrix = context.getImageData(0, 0, w, h).data;
    return matrix;
}


function test() {
    setTimeout(() => {
        let X = [];
        X.push(imageToMatrix("cat"));
        X.push(imageToMatrix("dog"));
    }, 1000);

}


/*-------------------------------------------------------------*/

var n = 2

let weights = [];
for (let i = 0; i < n; i++) {
    weights.push(Math.random());
}

function sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
}

function predict(inputs) {
    let output = 0;
    for (let i = 0; i < inputs.length; i++) {
        output += weights[i] * inputs[i];
    }
    return sigmoid(output);
}

function train(inputs, target) {
    let output = predict(inputs);
    let error = target - output;
    for (let i = 0; i < inputs.length; i++) {
        weights[i] += error * inputs[i] * 0.1;
    }
}

train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);
train([1, 0], 0);
train([0, 1], 1);
train([1, 1], 1);
train([0, 0], 0);



console.log(predict([1, 1]));
